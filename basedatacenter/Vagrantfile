# -*- mode: ruby -*-
# vi: set ft=ruby :

require './modules/Nodemanager.rb'

include Nodemanager

@IPAddressNodeHash = Hash.new {|h,k| h[k] = Array.new }
# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = '2'

Vagrant.require_version '>= 1.5.0'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  
  
  # Create Share for us to Share some files
  config.vm.synced_folder "share/", "/usr/devenv/share/", disabled: false
  # Disable Default Vagrant Share
  config.vm.synced_folder ".", "/vagrant", disabled: true
  
  # Setup resource requirements
  config.vm.provider "virtualbox" do |v|
    v.memory = 2048
    v.cpus = 2
  end
  
  # vagrant plugin install vagrant-hostmanager
  config.hostmanager.enabled = false
  config.hostmanager.manage_host = false
  config.hostmanager.manage_guest = true
  config.hostmanager.ignore_private_ip = false
  config.hostmanager.include_offline = true

  # NOTE: You will need to install the vagrant-omnibus plugin:
  #
  #   $ vagrant plugin install vagrant-omnibus
  #
  if Vagrant.has_plugin?("vagrant-omnibus")
    config.omnibus.chef_version = '12.13.37'
  end

  config.vm.box = 'bento/ubuntu-16.04'
  config.vm.network :private_network, type: 'dhcp'
  config.berkshelf.enabled = true


  
  # Assumes that the Vagrantfile is in the root of our
  # Chef repository.
  root_dir = File.dirname(File.expand_path(__FILE__))

  # Assumes that the node definitions are in the nodes
  # subfolder
  nodetypes = Dir[File.join(root_dir,'nodes','*.json')]

  ipindex = 0
  # Iterate over each of the JSON files
  nodetypes.each do |file|
    puts "parsing #{file}"
        node_json = JSON.parse(File.read(file))
        
        # Only process the node if it has a vagrant section
        if(node_json["vagrant"])
          @IPAddressNodeHash[node_json["vagrant"]["name"]] = Nodemanager.convertIPrange(node_json["vagrant"]["start_ip"], node_json["vagrant"]["end_ip"])

          
          1.upto(node_json["NumberOfNodes"]) do |nodeIndex| 
            
            ipindex = ipindex + 1
    
            # Allow us to remove certain items from the run_list if we're
            # using vagrant. Useful for things like networking configuration
            # which may not apply.
            if exclusions = node_json["vagrant"]["exclusions"]
              exclusions.each do |exclusion|
                if node_json["run_list"].delete(exclusion)
                  puts "removed #{exclusion} from the run list"
                end
              end
            end
      
            vagrant_name = node_json["vagrant"]["name"] + "-#{nodeIndex}"
            is_public = node_json["vagrant"]["is_public"]
            #vagrant_ip = node_json["vagrant"]["ip"]
            vagrant_ip = @IPAddressNodeHash[node_json["vagrant"]["name"]][nodeIndex-1]
            config.vm.define vagrant_name, autostart: true  do |vagrant|
              
              vagrant.vm.hostname = vagrant_name 
              puts  "Working with host #{vagrant_name} with IP : #{vagrant_ip}" 
      
              # Only use private networking if we specified an
              # IP. Otherwise fallback to DHCP
              # IP/28 is CIDR
              if vagrant_ip
                vagrant.vm.network :private_network, ip: vagrant_ip,  :netmask => "255.255.255.240"
              end
              
              if is_public
                config.vm.network "public_network", type: "dhcp", bridge: "em1"
              end
              
      
              # hostmanager provisioner
              config.vm.provision :hostmanager
              
              vagrant.vm.provision :chef_solo do |chef|
                chef.data_bags_path = "data_bags"
                chef.json = node_json          
              end        
         
              
            end  # End of VM Config
            
          end # End of node interation on count
        end  #End of vagrant found
      end # End of each node type file
      
      
  
end